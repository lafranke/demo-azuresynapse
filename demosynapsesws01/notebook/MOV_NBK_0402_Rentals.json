{
	"name": "MOV_NBK_0402_Rentals",
	"properties": {
		"folder": {
			"name": "Movies"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Movies",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 4,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "4",
				"spark.dynamicAllocation.maxExecutors": "4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f6c0b928-7078-4332-a106-e7a9c5253249/resourceGroups/demo-synapse-rg/providers/Microsoft.Synapse/workspaces/demosynapsesws01/bigDataPools/Movies",
				"name": "Movies",
				"type": "Spark",
				"endpoint": "https://demosynapsesws01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Movies",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql.types import StringType, TimestampType, DateType, IntegerType, DecimalType, BooleanType, StructType\r\n",
					"from pyspark.sql.functions import col, lit, udf, to_date\r\n",
					"import uuid"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Define functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"uuidUDF = udf(lambda : str(uuid.uuid4()),StringType())"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import data Fourth Coffee"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# Read data from lake\r\n",
					"df_FourthCoffee = spark.read.load('abfss://movies@demosynapsedls01.dfs.core.windows.net/raw/FourthCoffee/Rentals/Transactions.csv',\r\n",
					"                        format='csv',\r\n",
					"                        inferSchema=True,\r\n",
					"                        header=True, \r\n",
					"                        ignoreLeadingWhiteSpace=True, \r\n",
					"                        ignoreTrailingWhiteSpace=True\r\n",
					"                        )\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_FourthCoffee.printSchema()\r\n",
					"#display(df_FourthCoffee.limit(100))"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import data vanArsdel"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Read data from lake\r\n",
					"df_vanArsdel = spark.read.load('abfss://movies@demosynapsedls01.dfs.core.windows.net/raw/VanArsdel/OnPremRentals/dbo.Transactions.parquet',\r\n",
					"                        format='parquet',\r\n",
					"                        inferSchema=True,\r\n",
					"                        header=True, \r\n",
					"                        ignoreLeadingWhiteSpace=True, \r\n",
					"                        ignoreTrailingWhiteSpace=True\r\n",
					"                        )\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_vanArsdel.printSchema()\r\n",
					"#display(df_vanArsdel.limit(100))"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Transform data Fourth Coffee"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Rename columns\r\n",
					"df_FourthCoffeeModified = df_FourthCoffee.withColumnRenamed(\"TransactionID\", \"SourceSystemTransactionID\")\r\n",
					"\r\n",
					"# Add columns\r\n",
					"df_FourthCoffeeModified = (\r\n",
					"    df_FourthCoffeeModified.withColumn(\"SourceSystemID\", lit(\"2\").cast(IntegerType()))\r\n",
					")\r\n",
					"\r\n",
					"# Reorder colums\r\n",
					"df_FourthCoffeeModified = df_FourthCoffeeModified.select(\r\n",
					"    'SourceSystemID',\r\n",
					"    'SourceSystemTransactionID',\r\n",
					"    'CustomerID',\r\n",
					"    'MovieID',\r\n",
					"    'RentalDate',\r\n",
					"    'ReturnDate',\r\n",
					"    'RentalCost',\r\n",
					"    'LateFee',\r\n",
					"    'RewindFlag',\r\n",
					"    'CreatedDate',\r\n",
					"    'UpdatedDate'\r\n",
					")\r\n",
					"\r\n",
					"# Convert column types\r\n",
					"df_FourthCoffeeModified = (\r\n",
					"    df_FourthCoffeeModified.withColumn(\"SourceSystemID\", col(\"SourceSystemID\").cast(StringType()))\r\n",
					"                           .withColumn(\"SourceSystemTransactionID\", col(\"SourceSystemTransactionID\").cast(StringType()))\r\n",
					"                           .withColumn(\"CustomerID\", col(\"CustomerID\").cast(StringType()))\r\n",
					"                           .withColumn(\"MovieID\", col(\"MovieID\").cast(StringType()))\r\n",
					"                           .withColumn(\"RentalDate\", to_date(col(\"RentalDate\").cast(StringType()), \"yyyymmdd\"))\r\n",
					"                           .withColumn(\"ReturnDate\", to_date(col(\"ReturnDate\").cast(StringType()), \"yyyymmdd\"))\r\n",
					"                           .withColumn(\"RentalCost\", col(\"RentalCost\").cast(DecimalType()))\r\n",
					"                           .withColumn(\"LateFee\", col(\"LateFee\").cast(DecimalType()))\r\n",
					"                           .withColumn(\"RewindFlag\", col(\"RewindFlag\").cast(BooleanType()))\r\n",
					"                           .withColumn(\"CreatedDate\", col(\"CreatedDate\").cast(DateType()))\r\n",
					"                           .withColumn(\"UpdatedDate\", col(\"UpdatedDate\").cast(DateType()))\r\n",
					")\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_FourthCoffeeModified.printSchema()\r\n",
					"#display(df_FourthCoffeeModified.limit(100))"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Transform data vanArsdel"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Rename columns\r\n",
					"df_vanArsdelModified = df_vanArsdel.withColumnRenamed(\"TransactionID\", \"SourceSystemTransactionID\")\r\n",
					"\r\n",
					"# Add columns\r\n",
					"df_vanArsdelModified = (\r\n",
					"    df_vanArsdelModified.withColumn(\"SourceSystemID\", lit(\"3\").cast(IntegerType()))\r\n",
					")\r\n",
					"\r\n",
					"# Reorder colums\r\n",
					"df_vanArsdelModified = df_vanArsdelModified.select(\r\n",
					"    'SourceSystemID',\r\n",
					"    'SourceSystemTransactionID',\r\n",
					"    'CustomerID',\r\n",
					"    'MovieID',\r\n",
					"    'RentalDate',\r\n",
					"    'ReturnDate',\r\n",
					"    'RentalCost',\r\n",
					"    'LateFee',\r\n",
					"    'RewindFlag',\r\n",
					"    'CreatedDate',\r\n",
					"    'UpdatedDate'\r\n",
					")\r\n",
					"\r\n",
					"# Convert column types\r\n",
					"df_vanArsdelModified = (\r\n",
					"    df_vanArsdelModified.withColumn(\"SourceSystemID\", col(\"SourceSystemID\").cast(StringType()))\r\n",
					"                           .withColumn(\"SourceSystemTransactionID\", col(\"SourceSystemTransactionID\").cast(StringType()))\r\n",
					"                           .withColumn(\"CustomerID\", col(\"CustomerID\").cast(StringType()))\r\n",
					"                           .withColumn(\"MovieID\", col(\"MovieID\").cast(StringType()))\r\n",
					"                           .withColumn(\"RentalDate\", to_date(col(\"RentalDate\").cast(StringType()), \"yyyymmdd\"))\r\n",
					"                           .withColumn(\"ReturnDate\", to_date(col(\"ReturnDate\").cast(StringType()), \"yyyymmdd\"))\r\n",
					"                           .withColumn(\"RentalCost\", col(\"RentalCost\").cast(DecimalType()))\r\n",
					"                           .withColumn(\"LateFee\", col(\"LateFee\").cast(DecimalType()))\r\n",
					"                           .withColumn(\"RewindFlag\", col(\"RewindFlag\").cast(BooleanType()))\r\n",
					"                           .withColumn(\"CreatedDate\", col(\"CreatedDate\").cast(DateType()))\r\n",
					"                           .withColumn(\"UpdatedDate\", col(\"UpdatedDate\").cast(DateType()))\r\n",
					")\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_vanArsdelModified.printSchema()\r\n",
					"#display(df_vanArsdelModified.limit(100))"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Combine all dataframes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df_unioned = df_FourthCoffeeModified.unionAll(df_vanArsdelModified)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Add new ID"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Add columns\r\n",
					"df_unioned_withID = df_unioned.withColumn(\"GlobalTransactionID\", uuidUDF())\r\n",
					"\r\n",
					"# Order columns\r\n",
					"df_unioned_withID = df_unioned_withID.select(\r\n",
					"    'SourceSystemID',\r\n",
					"    'GlobalTransactionID',\r\n",
					"    'SourceSystemTransactionID',\r\n",
					"    'CustomerID',\r\n",
					"    'MovieID',\r\n",
					"    'RentalDate',\r\n",
					"    'ReturnDate',\r\n",
					"    'RentalCost',\r\n",
					"    'LateFee',\r\n",
					"    'RewindFlag',\r\n",
					"    'CreatedDate',\r\n",
					"    'UpdatedDate'\r\n",
					")\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_unioned_withID.printSchema()\r\n",
					"#display(df_unioned_withID.limit(100))"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Writing transformed data to lake "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df_unioned.write.format('parquet').mode('overwrite').save('abfss://movies@demosynapsedls01.dfs.core.windows.net/curated/rentals.parquet')"
				],
				"execution_count": 16
			}
		]
	}
}