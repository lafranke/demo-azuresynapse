{
	"name": "MOV_NBK_0403_Customers",
	"properties": {
		"folder": {
			"name": "Movies"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Movies",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f6c0b928-7078-4332-a106-e7a9c5253249/resourceGroups/demo-synapse-rg/providers/Microsoft.Synapse/workspaces/demosynapsesws01/bigDataPools/Movies",
				"name": "Movies",
				"type": "Spark",
				"endpoint": "https://demosynapsesws01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Movies",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql.types import StringType, TimestampType, DateType, IntegerType, DecimalType, BooleanType, StructType\r\n",
					"from pyspark.sql.functions import col, lit, udf, to_date\r\n",
					"import uuid"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"uuidUDF = udf(lambda : str(uuid.uuid4()),StringType())"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import data Southridge"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Read data from lake\r\n",
					"df_Southridge_Sales_Customers = spark.read.load('abfss://movies@demosynapsedls01.dfs.core.windows.net/raw/Southridge/CloudSales/dbo.Customers.parquet',\r\n",
					"                        format='parquet',\r\n",
					"                        inferSchema=True,\r\n",
					"                        header=True, \r\n",
					"                        ignoreLeadingWhiteSpace=True, \r\n",
					"                        ignoreTrailingWhiteSpace=True\r\n",
					"                        )\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_Southridge_Sales_Customers.printSchema\r\n",
					"#display(df_Southridge_Sales_Customers.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Read data from lake\r\n",
					"df_Southridge_Sales_Adresses = spark.read.load('abfss://movies@demosynapsedls01.dfs.core.windows.net/raw/Southridge/CloudSales/dbo.Addresses.parquet',\r\n",
					"                        format='parquet',\r\n",
					"                        inferSchema=True,\r\n",
					"                        header=True, \r\n",
					"                        ignoreLeadingWhiteSpace=True, \r\n",
					"                        ignoreTrailingWhiteSpace=True\r\n",
					"                        )\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_Southridge_Sales_Adresses.printSchema\r\n",
					"#display(df_Southridge_Sales_Adresses.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Join dataframes\r\n",
					"df_Southridge_Sales_Joined = (\r\n",
					"    df_Southridge_Sales_Customers.alias('Customers').join(\r\n",
					"        df_Southridge_Sales_Adresses.alias('Addresses'),\r\n",
					"        df_Southridge_Sales_Customers.CustomerID == df_Southridge_Sales_Adresses.CustomerID,\r\n",
					"        'inner'\r\n",
					"    )\r\n",
					")\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_Southridge_Sales_Joined.printSchema\r\n",
					"#display(df_Southridge_Sales_Joined.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Read data from lake\r\n",
					"df_Southridge_Streaming_Customers = spark.read.load('abfss://movies@demosynapsedls01.dfs.core.windows.net/raw/Southridge/CloudStreaming/dbo.Customers.parquet',\r\n",
					"                        format='parquet',\r\n",
					"                        inferSchema=True,\r\n",
					"                        header=True, \r\n",
					"                        ignoreLeadingWhiteSpace=True, \r\n",
					"                        ignoreTrailingWhiteSpace=True\r\n",
					"                        )\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_Southridge_Streaming_Customers.printSchema#\r\n",
					"#display(df_Southridge_Streaming_Customers.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Read data from lake\r\n",
					"df_Southridge_Streaming_Adresses = spark.read.load('abfss://movies@demosynapsedls01.dfs.core.windows.net/raw/Southridge/CloudStreaming/dbo.Addresses.parquet',\r\n",
					"                        format='parquet',\r\n",
					"                        inferSchema=True,\r\n",
					"                        header=True, \r\n",
					"                        ignoreLeadingWhiteSpace=True, \r\n",
					"                        ignoreTrailingWhiteSpace=True\r\n",
					"                        )\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_Southridge_Streaming_Adresses.printSchema\r\n",
					"#display(df_Southridge_Streaming_Adresses.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Join dataframes\r\n",
					"df_Southridge_Streaming_Joined = (\r\n",
					"    df_Southridge_Streaming_Customers.alias('Customers').join(\r\n",
					"        df_Southridge_Streaming_Adresses.alias('Adresses'), \r\n",
					"        df_Southridge_Streaming_Customers.CustomerID == df_Southridge_Streaming_Adresses.CustomerID,\r\n",
					"        'inner'\r\n",
					"    )\r\n",
					")\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_Southridge_Streaming_Joined.printSchema\r\n",
					"#display(df_Southridge_Streaming_Joined.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import data FourthCoffee\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# Read data from lake\r\n",
					"df_FourthCoffee = spark.read.load('abfss://movies@demosynapsedls01.dfs.core.windows.net/raw/FourthCoffee/Rentals/Customers.csv',\r\n",
					"                        format='csv',\r\n",
					"                        inferSchema=True,\r\n",
					"                        header=True, \r\n",
					"                        ignoreLeadingWhiteSpace=True, \r\n",
					"                        ignoreTrailingWhiteSpace=True\r\n",
					"                        )\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_FourthCoffee.printSchema\r\n",
					"#display(df_FourthCoffee.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Read data from lake\r\n",
					"df_vanArsdel = spark.read.load('abfss://movies@demosynapsedls01.dfs.core.windows.net/raw/VanArsdel/OnPremRentals/dbo.Customers.parquet',\r\n",
					"                        format='parquet',\r\n",
					"                        inferSchema=True,\r\n",
					"                        header=True, \r\n",
					"                        ignoreLeadingWhiteSpace=True, \r\n",
					"                        ignoreTrailingWhiteSpace=True\r\n",
					"                        )\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_vanArsdel.printSchema\r\n",
					"#display(df_vanArsdel.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Transform data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Add columns\r\n",
					"df_Southridge_Sales_Modified = (\r\n",
					"    df_Southridge_Sales_Joined.withColumn(\"SourceSystemID\", lit(\"1\").cast(IntegerType()))\r\n",
					"                              .withColumn(\"CreatedDate\", max(col(\"Customers.CreatedDate\").cast(\"long\"), col(\"Adresses.CreatedDate\").cast(\"long\")))\r\n",
					")\r\n",
					"\r\n",
					"# Reorder colums\r\n",
					"df_Southridge_Sales_Modified = df_Southridge_Sales_Modified.select(\r\n",
					"    'SourceSystemID',\r\n",
					"    'Customers.CustomerID',\r\n",
					"    'LastName',\r\n",
					"    'FirstName',\r\n",
					"    'AddressLine1',\r\n",
					"    'AddressLine2',\r\n",
					"    'City',\r\n",
					"    'State',\r\n",
					"    'ZipCode',\r\n",
					"    'PhoneNumber',\r\n",
					"    'Customers.CreatedDate',\r\n",
					"    'Customers.UpdatedDate',\r\n",
					"    'Adresses.CreatedDate',\r\n",
					"    'Adresses.UpdatedDate',\r\n",
					"    'CreatedDate'\r\n",
					")\r\n",
					"\r\n",
					"# Rename columns\r\n",
					"df_Southridge_Sales_Modified = df_Southridge_Sales_Modified.withColumn(\"SourceSystemCustomerID\", col(\"CustomerID\"))\r\n",
					"\r\n",
					"# Convert column types\r\n",
					"df_Southridge_Sales_Modified = (\r\n",
					"    df_Southridge_Sales_Modified.withColumn(\"SourceSystemID\", col(\"SourceSystemID\").cast(IntegerType()))\r\n",
					"                           .withColumn(\"SourceSystemCustomerID\", col(\"SourceSystemCustomerID\").cast(StringType()))\r\n",
					"                           .withColumn(\"LastName\", col(\"LastName\").cast(StringType()))\r\n",
					"                           .withColumn(\"FirstName\", col(\"FirstName\").cast(StringType()))\r\n",
					"                           .withColumn(\"AddressLine1\", col(\"AddressLine1\").cast(StringType()))\r\n",
					"                           .withColumn(\"AddressLine2\", col(\"AddressLine2\").cast(StringType()))\r\n",
					"                           .withColumn(\"City\", col(\"City\").cast(StringType()))\r\n",
					"                           .withColumn(\"State\", col(\"State\").cast(StringType()))\r\n",
					"                           .withColumn(\"ZipCode\", col(\"ZipCode\").cast(StringType()))\r\n",
					"                           .withColumn(\"PhoneNumber\", col(\"PhoneNumber\").cast(StringType()))\r\n",
					"                           .withColumn(\"CreatedDate\", col(\"CreatedDate\").cast(DateType()))\r\n",
					"                           .withColumn(\"UpdatedDate\", col(\"UpdatedDate\").cast(DateType()))\r\n",
					")\r\n",
					"\r\n",
					"# Display dataframe\r\n",
					"#df_Southridge_Sales_Modified.printSchema\r\n",
					"#display(df_Southridge_Sales_Modified.limit(100))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Combine all dataframes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#df_unioned = df_FourthCoffeeModified.unionAll(df_vanArsdelModified)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Writing transformed data to lake "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#df_unioned.write.format('parquet').mode('overwrite').save('abfss://movies@demosynapsedls01.dfs.core.windows.net/curated/rentals.parquet')"
				],
				"execution_count": null
			}
		]
	}
}